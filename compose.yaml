services:
  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - mynetwork
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmqctl status" ]
      interval: 8s
      timeout: 5s
      retries: 5

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev
    depends_on:
      - user_service
    networks:
      - mynetwork

  user_service:
    build:
      context: ./user_service
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "3001:3000"
    develop:
      watch:
        - action: rebuild
          path: ./user_service
          target: ./user_service:/app
    networks:
      - mynetwork

  results_service:
    build:
      context: ./results_service
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "3003:3000"
    develop:
      watch:
        - action: rebuild
          path: ./results_service
          target: ./results_service:/app
    networks:
      - mynetwork

  solver_manager_service:
    build:
      context: ./solver_manager_service
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "5002:3000"
    develop:
      watch:
        - action: rebuild
          path: ./solver_manager_service
          target: ./solver_manager_service:/app
    networks:
      - mynetwork

  solver_service:
    build:
      context: ./solver_service
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "5001:5000"
    develop:
      watch:
        - action: rebuild
          path: ./solver_service
          target: ./solver_service:/app
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge
